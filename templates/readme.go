package templates

import "strings"

var (
	// ReadMe README.md template.
	ReadMe = `# {{.project_name}}

[![Actions Status](https://{{.module_name}}/workflows/Go/badge.svg)](https://{{.module_name}}/actions)
[![GoDoc](https://godoc.org/{{.module_name}}?status.svg)](https://pkg.go.dev/mod/{{.module_name}})
[![GoReportCard](https://goreportcard.com/badge/{{.module_name}})](https://goreportcard.com/report/{{.module_name}})

{{.project_name}} is a production ready project template for microservices using gRPC - generated by [microgen](https://github.com/pthethanh/microgen)

## Getting Started

These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.

### Prerequisites

- Go {{.go_version}}
- Protocol Buffer {{.protobuf_version}}

Install Protocol Buffer

BACKTICKSshell
make install_protobuf
BACKTICKS

### Installing

Clone the code.
BACKTICKSshell
git clone https://{{.module_name}}
BACKTICKS

Gen gRPC, gRPC Gateway, Swagger and verify the code.

BACKTICKSshell
make all
BACKTICKS

Start the service.

BACKTICKSshell
go run main.go
BACKTICKS

Verify the APIs

BACKTICKSshell
curl http://localhost:{{.port}}/internal/readiness
curl http://localhost:{{.port}}/internal/liveness
curl http://localhost:{{.port}}/internal/metrics
BACKTICKS

## Running the tests

Run the test by simply execute: BACKTICKmakeBACKTICK

## Coding style

The code convention should follow [effective-go](https://github.com/golovers/effective-go)

All developers are required to run BACKTICKmakeBACKTICK before pushing the code to remote git.

## Deployment

Build Docker Image

BACKTICKSshell
make docker_build
BACKTICKS

Run With Docker Image

BACKTICKSshell
make docker
BACKTICKS

Run With Docker Compose

BACKTICKSshell
make compose
BACKTICKS
{{if .heroku}}
Deploy to Heroku

BACKTICKSshell
make heroku
BACKTICKS
{{end}}
## Built With

- [micro](https://github.com/pthethanh/micro)- Microservices tool kit.
- [microgen](https://github.com/pthethanh/microgen) - Production ready project template for microservices.

## Contributing

TBU

## Versioning

We use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://{{.module_name}}/tags).

## Authors

**Thanh Pham** - *Initial work* - [Thanh Pham Github](https://github.com/pthethanh)

See also the list of [contributors](https://{{.module_name}}/contributors) who participated in this project.

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details

## Acknowledgments

TBU
`
)

func init() {
	ReadMe = strings.ReplaceAll(ReadMe, "BACKTICKS", "```")
	ReadMe = strings.ReplaceAll(ReadMe, "BACKTICK", "`")
}
